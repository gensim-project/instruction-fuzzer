%{

#include <iostream>

#define yyerminate() return ENDOFFILE

#include "TemplateParser.h"
#include "fuzzer-parser.h"

#include "fuzzer-syntax.tabs.h"

int l_debug = 0;

%}

%option reentrant bison-bridge

%option noyywrap
%option yylineno

%x ML_COMMENT
%x ML_FILENAME
%x ML_FIELDID
%x ML_FIELD
%x ML_FIELD_STRING
%x ML_TEMPLATE
%x ML_TEMPLATE_FIELDID

%%

"/*" BEGIN(ML_COMMENT);

<ML_COMMENT>"*/" BEGIN(INITIAL);
<ML_COMMENT>. ;
<ML_COMMENT>\n ;

"//"[^\n]* ;

[ \t] { }


"\n" { return NEWLINE; }

"field"    							{ BEGIN(ML_FIELDID); return FIELD; }
"include "  						{ BEGIN(ML_FILENAME); return INCLUDE; }
"template"[ \t]* 					{ BEGIN(ML_TEMPLATE); return TEMPLATE; }

<ML_FILENAME>[a-zA-Z0-9./]+ 		{ yylval->sval = strdup(yytext); return FILENAME; }
<ML_FILENAME>"\n" 					{ BEGIN(INITIAL); return NEWLINE; }

<ML_FIELDID>[ \t]					{}
<ML_FIELDID>[a-zA-Z_1-9]+  			{ BEGIN(ML_FIELD); yylval->sval = strdup(yytext); return FIELDID; }

<ML_FIELD>[ \t]                     {}
<ML_FIELD>[a-zA-Z0-9_#]+ 			{ yylval->sval = strdup(yytext); return FIELDTEXT; }
<ML_FIELD>\"[^"]*\" 				{ yylval->sval = strdup(yytext+1); yylval->sval[strlen(yylval->sval)-1] = '\0'; return FIELDTEXT; }
<ML_FIELD>"\n" 						{ BEGIN(INITIAL); return NEWLINE; }

<ML_TEMPLATE>[a-zA-Z0-9,.{}_\-# ]+ 		{ yylval->sval = strdup(yytext); return TEMPLATETEXT; }
<ML_TEMPLATE>"\\"[\[\]]             { yylval->sval = strdup(yytext+1); return TEMPLATETEXT; }
<ML_TEMPLATE>"[" 					{ BEGIN(ML_TEMPLATE_FIELDID); return OBRACKET; }
<ML_TEMPLATE>"\n" 					{ BEGIN(INITIAL); return NEWLINE; }

<ML_TEMPLATE_FIELDID>[ \t] 			{}
<ML_TEMPLATE_FIELDID>"]" 			{ BEGIN(ML_TEMPLATE); return CBRACKET; }
<ML_TEMPLATE_FIELDID>[a-zA-Z_1-9]+  	{ yylval->sval = strdup(yytext); return FIELDID; }

%%
